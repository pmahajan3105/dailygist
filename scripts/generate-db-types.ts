import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// Load environment variables explicitly from project root .env
dotenv.config({ path: path.resolve(__dirname, '..', '.env') });


// Configuration
const CONFIG = {
  // Output file for generated types
  OUTPUT_FILE: path.join(
    __dirname,
    '..',
    'packages',
    'core',
    'src',
    'supabase',
    'database.types.ts'
  ),
  // Schema to generate types for
  SCHEMA: 'public',
  // Supabase CLI command
  CLI_COMMAND: 'supabase',
} as const;

/**
 * Ensure the output directory exists
 */
const ensureOutputDir = () => {
  const dir = path.dirname(CONFIG.OUTPUT_FILE);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
};

/**
 * Run the Supabase CLI to generate TypeScript types
 */
const generateTypes = (): boolean => {
  try {
    console.log('üöÄ Generating database types...');
    
    // Ensure the output directory exists
    ensureOutputDir();
    
    // Extract project ID from NEXT_PUBLIC_SUPABASE_URL
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    if (!supabaseUrl) {
      throw new Error('NEXT_PUBLIC_SUPABASE_URL environment variable is not set');
    }
    
    // Extract the project ID from the URL (e.g., https://yfoctiqfugyyitaqpvcj.supabase.co)
    const projectId = supabaseUrl.match(/https?:\/\/([^.]+)\.supabase\.co/)?.[1];
    if (!projectId) {
      throw new Error('Could not extract project ID from NEXT_PUBLIC_SUPABASE_URL');
    }

    console.log(`‚ÑπÔ∏è Using project ID: ${projectId} (extracted from NEXT_PUBLIC_SUPABASE_URL)`);

    const command = [
      CONFIG.CLI_COMMAND,
      'gen',
      'types',
      'typescript',
      `--project-id=${projectId}`,
      `--schema=${CONFIG.SCHEMA}`
    ].join(' ');
    
    // Execute the command and capture output
    console.log(`üîß Running: ${command} > ${CONFIG.OUTPUT_FILE}`);
    const output = execSync(command, { stdio: ['ignore', 'pipe', 'inherit'] });
    
    // Write the output to the file
    fs.writeFileSync(CONFIG.OUTPUT_FILE, output.toString());
    
    // Post-process the generated types
    postProcessTypes();
    
    console.log(`‚úÖ Types generated successfully at ${CONFIG.OUTPUT_FILE}`);
    return true;
  } catch (error) {
    console.error('‚ùå Error generating database types:');
    if (error instanceof Error) {
      console.error(error.message);
      if (error.stack) {
        console.error(error.stack);
      }
    } else {
      console.error(error);
    }
    return false;
  }
};

/**
 * Post-process the generated types to fix any issues
 */
const postProcessTypes = () => {
  try {
    let types = fs.readFileSync(CONFIG.OUTPUT_FILE, 'utf8');
    
    // Apply fixes to the generated types
    const fixes = [
      // Replace 'export type Database' with 'export interface Database'
      { pattern: /export type Database =/g, replacement: 'export interface Database' },
      // Ensure Json type is properly exported
      { pattern: /export type Json =/g, replacement: 'export type Json =' },
      // Add a comment at the top of the file
      { 
        pattern: /^/, 
        replacement: '// This file is auto-generated by the generate-db-types script.\n// Do not edit this file directly.\n\n' 
      },
    ];
    
    // Apply all fixes
    for (const fix of fixes) {
      types = types.replace(fix.pattern, fix.replacement);
    }
    
    // Write the fixed types back to the file
    fs.writeFileSync(CONFIG.OUTPUT_FILE, types);
    
  } catch (error) {
    console.error('‚ùå Error post-processing types:');
    if (error instanceof Error) {
      console.error(error.message);
    } else {
      console.error(error);
    }
    throw error;
  }
};

/**
 * Main function
 */
const main = () => {
  // Check for required environment variables
  if (!process.env.SUPABASE_PROJECT_REF) {
    console.error('‚ùå Error: SUPABASE_PROJECT_REF environment variable is not set');
    console.log('\nüí° Please set the SUPABASE_PROJECT_REF environment variable to your Supabase project reference');
    console.log('Example:');
    console.log('  export SUPABASE_PROJECT_REF=your-project-ref');
    console.log('  npm run generate-types\n');
    process.exit(1);
  }
  
  // Generate the types
  const success = generateTypes();
  
  // Exit with appropriate status code
  process.exit(success ? 0 : 1);
};

// Run the main function
main();
